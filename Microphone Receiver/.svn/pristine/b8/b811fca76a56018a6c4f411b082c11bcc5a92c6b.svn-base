package edu.iup.cosc.mic.server;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.nio.ByteBuffer;

import javax.sound.sampled.LineUnavailableException;
import javax.swing.SwingUtilities;

import edu.iup.cosc.mic.server.ui.MicManagerFrame;

public class MicReceiver extends Thread {
	private Socket client;
	private String name;
	private DataInputStream fromClient;
	private DataOutputStream toClient;
	private DatagramSocket fromClientUDP;
	private boolean running;
	private int bufferSize;
	private int sampleRate;
	private int audioFormat;
	private int channelConfiguation;
	private byte[] buffer;
	private Player qPlayer;
	private Thread killThread;
	private MicManagerFrame serverFrame;

	public MicReceiver(MicManagerFrame serverFrame, Socket client)
			throws IOException {
		this.serverFrame = serverFrame;
		this.client = client;

		fromClient = new DataInputStream(client.getInputStream());
		toClient = new DataOutputStream(client.getOutputStream());

		name = fromClient.readUTF();

		killThread = new Thread(new Runnable() {
			public void run() {
				try {
					synchronized (fromClient) {
						String msg = fromClient.readUTF();
						if (msg.equals("kill")) {
							MicReceiver.this.serverFrame
									.removeReceiver(MicReceiver.this);
						}
					}
					killThread = null;
				} catch (IOException e) {
					MicReceiver.this.serverFrame
							.removeReceiver(MicReceiver.this);
				}
			}
		});
		killThread.start();

	}

	public String toString() {
		return name;
	}

	public void activate() throws IOException, LineUnavailableException {
		System.out.println("Activing");

		toClient.writeUTF("ready");
		toClient.flush();

		fromClientUDP = new DatagramSocket(S.Net.PORT);

		synchronized (fromClient) {
			bufferSize = fromClient.readInt();
			sampleRate = fromClient.readInt();
			audioFormat = fromClient.readInt();
			channelConfiguation = fromClient.readInt();
		}
		
		System.out
				.printf("Audio data: bufferSize=%d rate=%d format=%d channelConfig=%d\n",
						bufferSize, sampleRate, audioFormat,
						channelConfiguation);

		buffer = new byte[bufferSize + 12];

		float sampleRate = this.sampleRate;
		int sampleSize = audioFormat == 2 ? 16 : audioFormat == 3 ? 8 : 0;
		int channels = channelConfiguation == 16 ? 1
				: channelConfiguation == 12 ? 2 : 0;
		boolean signed = true;
		boolean bigEndian = false;

		qPlayer = new Player(sampleRate, sampleSize, channels, signed,
				bigEndian);

		this.setPriority(MAX_PRIORITY);

		start();

		System.out.println("sending go");
		toClient.writeUTF("go");
		toClient.flush();

		killThread = new Thread(new Runnable() {
			public void run() {
				try {
					if (fromClient.readUTF().equals("kill")) {
						MicReceiver.this.kill();
					}
				} catch (IOException e) {
				}
			}
		});
		killThread.start();

	}

	public void run() {
		running = true;
		int lastNo = -1;

		try {

			while (running) {
				DatagramPacket packet = new DatagramPacket(buffer,
						buffer.length);
				fromClientUDP.receive(packet);

				ByteBuffer bb = ByteBuffer.wrap(buffer);
				int pNo = bb.getInt();
				long ts = bb.getLong();

//				System.out.printf("%d %d\n", pNo, ts);

				if (pNo > lastNo) {
					qPlayer.play(buffer, 12, buffer.length - 12);
					lastNo = pNo;
				}
			}
		} catch (IOException e) {
			kill();
		}
	}

	public void kill() {
		running = false;

		try {
			if (SwingUtilities.isEventDispatchThread()) {
				serverFrame.clearSpeaker(MicReceiver.this);
			} else {
				SwingUtilities.invokeAndWait(new Runnable() {
					public void run() {
						serverFrame.clearSpeaker(MicReceiver.this);

					}
				});
			}
		} catch (Exception e) {
		}

		try {
			if (fromClientUDP != null) {
				fromClientUDP.close();
				fromClientUDP = null;
			}
		} catch (Exception e) {
		}

		try {
			if (killThread != null) {
				killThread.interrupt();
				killThread = null;
			}
		} catch (Exception e) {
		}

		try {
			qPlayer.close();
		} catch (Exception e) {
		}

		try {
			toClient.writeUTF("kill");
		} catch (Exception e) {
		}

		try {
			toClient.close();
		} catch (Exception e) {
		}

		try {
			fromClient.close();
		} catch (Exception e) {
		}

		try {
			client.close();
		} catch (Exception e) {
		}
	}
}
